services:
  config-server:
    image: bookings-service/config-service:latest
    environment:
      VAULT_TOKEN: dev-only-token
      VAULT_HOST: vault
    ports:
      - "8071:8071"
    depends_on:
      vault:
        condition: service_healthy
      vault-configure:
        condition: service_completed_successfully
    networks:
      backend:
        aliases:
          - "config-server"
  aircraft-service:
    image: bookings-service/aircraft-service:latest
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://config-server:8071"
      SERVER_PORT: "8080"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://database:5432/demo"
      EUREKA_SERVER: "http://eureka-server:8070/eureka/"
    depends_on:
      database:
        condition: service_healthy
      config-server:
        condition: service_started
      vault:
        condition: service_started
    ports:
      - "8080:8080"
    networks:
      - backend
  airport-service:
    image: bookings-service/airport-service:latest
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://config-server:8071"
      SERVER_PORT: "8081"
      SPRING_DATASOURCE_URL: "jdbc:postgresql://database:5432/demo"
      EUREKA_SERVER: "http://eureka-server:8070/eureka/"
    depends_on:
      database:
        condition: service_healthy
      config-server:
        condition: service_started
      vault:
        condition: service_started
    ports:
      - "8081:8081"
    networks:
      - backend
  database:
    image: postgres:16.2
    ports:
      - "5432:5432"
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB:       ${DB_NAME}
    volumes:
      - ${VOLUME_PATH}:/var/lib/postgresql/data
      - ./buildSrc/src/main/resources/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      backend:
        aliases:
          - "database"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  vault:
    image: hashicorp/vault:latest
    restart: always
    entrypoint: vault server -dev -dev-listen-address=0.0.0.0:8200
    environment:
      VAULT_TOKEN: dev-only-token
      VAULT_ADDR: http://vault:8200
      VAULT_DEV_ROOT_TOKEN_ID: dev-only-token
    ports:
      - "8200:8200"
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: [ "CMD", "vault", "status" ]
    networks:
      backend:
        aliases:
          - "vault"
  vault-configure:
    image: hashicorp/vault:latest
    volumes:
      - ./buildSrc/src/main/resources/vault.sh:/scripts/vault.sh
    command: sh /scripts/vault.sh
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: dev-only-token
      VAULT_TOKEN: dev-only-token
      VAULT_ADDR: http://vault:8200
    cap_add:
      - IPC_LOCK
    depends_on:
      vault:
        condition: service_healthy
    networks:
      - backend
  eureka-server:
    image: bookings-service/eureka-service:latest
    environment:
      SPRING_CONFIG_IMPORT: "configserver:http://config-server:8071"
    ports:
      - "8070:8070"
    depends_on:
      database:
        condition: service_healthy
      config-server:
        condition: service_started
    networks:
      backend:
        aliases:
          - "eureka-server"
networks:
  backend:
    driver: bridge